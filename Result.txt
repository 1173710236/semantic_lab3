1:< proc ,101 >
1:< abs ,1 >
1:< ; ,302 >
2:< begin ,113 >
3:< integer ,103 >
3:< a ,1 >
3:< ; ,302 >
4:< integer ,103 >
4:< b ,1 >
4:< ; ,302 >
5:< integer ,103 >
5:< c ,1 >
5:< ; ,302 >
6:< integer ,103 >
6:< d ,1 >
6:< ; ,302 >
7:< integer ,103 >
7:< x ,1 >
7:< ; ,302 >
8:< integer ,103 >
8:< y ,1 >
8:< ; ,302 >
9:< integer ,103 >
9:< z ,1 >
9:< ; ,302 >
10:< integer ,103 >
10:< z ,1 >
10:< ; ,302 >
10:< // error ,7 >
12:< arr ,1 >
12:< [ ,303 >
12:< 3 ,2 >
12:< ] ,304 >
12:< [ ,303 >
12:< 5 ,2 >
12:< ] ,304 >
12:< = ,307 >
12:< 2 ,2 >
12:< ; ,302 >
14:< while ,108 >
14:< a ,1 >
14:< < ,204 >
14:< b ,1 >
14:< do ,109 >
15:< begin ,113 >
16:< if ,105 >
16:< c ,1 >
16:< < ,204 >
16:< d ,1 >
16:< then ,107 >
17:< begin ,113 >
18:< x ,1 >
18:< = ,307 >
18:< y ,1 >
18:< + ,201 >
18:< z ,1 >
18:< ; ,302 >
19:< end ,114 >
20:< else ,106 >
21:< begin ,113 >
22:< x ,1 >
22:< = ,307 >
22:< y ,1 >
22:< * ,203 >
22:< z ,1 >
22:< ; ,302 >
23:< end ,114 >
24:< end ,114 >
26:< if ,105 >
26:< c ,1 >
26:< < ,204 >
26:< 5 ,2 >
26:< then ,107 >
27:< begin ,113 >
28:< z ,1 >
28:< = ,307 >
28:< x ,1 >
28:< + ,201 >
28:< 1 ,2 >
28:< ; ,302 >
29:< end ,114 >
30:< else ,106 >
31:< begin ,113 >
32:< x ,1 >
32:< = ,307 >
32:< y ,1 >
32:< ; ,302 >
33:< end ,114 >
35:< call ,110 >
35:< a ,1 >
35:< ( ,305 >
35:< 1 ,2 >
35:< , ,301 >
35:< 2 ,2 >
35:< + ,201 >
35:< 1 ,2 >
35:< , ,301 >
35:< a ,1 >
35:< * ,203 >
35:< b ,1 >
35:< ) ,306 >
35:< ; ,302 >
35:< //error ,7 >
36:< e1 ,1 >
36:< = ,307 >
36:< 7 ,2 >
36:< ; ,302 >
36:< // error ,7 >
37:< a ,1 >
37:< = ,307 >
37:< e2 ,1 >
37:< ; ,302 >
37:< // error ,7 >
38:< a ,1 >
38:< [ ,303 >
38:< 0 ,2 >
38:< ] ,304 >
38:< = ,307 >
38:< 1 ,2 >
38:< ; ,302 >
38:< // error ,7 >
42:< end ,114 >
43:< # ,-1 >
当前待输入: proc abs ; begin integer a ; integer b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: abs ; begin integer a ; integer b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; begin integer a ; integer b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: begin integer a ; integer b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

M0 -> ε
规约	当前待输入: begin integer a ; integer b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: integer a ; integer b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: a ; integer b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

X -> integer
规约	当前待输入: a ; integer b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

C -> ε
规约	当前待输入: a ; integer b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

T -> X C
规约	当前待输入: a ; integer b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; integer b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: integer b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> T id ;
规约	当前待输入: integer b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

X -> integer
规约	当前待输入: b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

C -> ε
规约	当前待输入: b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

T -> X C
规约	当前待输入: b ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> T id ;
规约	当前待输入: integer c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

X -> integer
规约	当前待输入: c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

C -> ε
规约	当前待输入: c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

T -> X C
规约	当前待输入: c ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> T id ;
规约	当前待输入: integer d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

X -> integer
规约	当前待输入: d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

C -> ε
规约	当前待输入: d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

T -> X C
规约	当前待输入: d ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> T id ;
规约	当前待输入: integer x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

X -> integer
规约	当前待输入: x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

C -> ε
规约	当前待输入: x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

T -> X C
规约	当前待输入: x ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> T id ;
规约	当前待输入: integer y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

X -> integer
规约	当前待输入: y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

C -> ε
规约	当前待输入: y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

T -> X C
规约	当前待输入: y ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> T id ;
规约	当前待输入: integer z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

X -> integer
规约	当前待输入: z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

C -> ε
规约	当前待输入: z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

T -> X C
规约	当前待输入: z ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> T id ;
规约	当前待输入: integer z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

X -> integer
规约	当前待输入: z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

C -> ε
规约	当前待输入: z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

T -> X C
规约	当前待输入: z ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: // error arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

当前待输入: arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> T id ;
规约	当前待输入: arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> D D
规约	当前待输入: arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> D D
规约	当前待输入: arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> D D
规约	当前待输入: arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> D D
规约	当前待输入: arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> D D
规约	当前待输入: arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> D D
规约	当前待输入: arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

D -> D D
规约	当前待输入: arr [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: [ 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: 3 ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> num
规约	当前待输入: ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: ] [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

L -> id [ E ]
规约	当前待输入: [ 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: 5 ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> num
规约	当前待输入: ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: ] = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

L -> L [ E ]
规约	当前待输入: = 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: 2 ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> num
规约	当前待输入: ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: ; while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S -> L = E ;
规约	当前待输入: while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

M -> ε
规约	当前待输入: while a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

M -> ε
规约	当前待输入: a < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: < b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

R -> <
规约	当前待输入: b do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

B2 -> E R E
规约	当前待输入: do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

B1 -> B2
规约	当前待输入: do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

B -> B1
规约	当前待输入: do begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

M -> ε
规约	当前待输入: begin if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: if c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: c < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: < d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

R -> <
规约	当前待输入: d then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

B2 -> E R E
规约	当前待输入: then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

B1 -> B2
规约	当前待输入: then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

B -> B1
规约	当前待输入: then begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

M -> ε
规约	当前待输入: begin x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: x = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: = y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: y + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: + z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: z ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E + E1
规约	当前待输入: ; end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S -> id = E ;
规约	当前待输入: end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S3 -> S
规约	当前待输入: end else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S1 -> begin S3 end
规约	当前待输入: else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

N -> ε
规约	当前待输入: else begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

M -> ε
规约	当前待输入: begin x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: x = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: = y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: y * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: * z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: z ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E1 * E2
规约	当前待输入: ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: ; end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S -> id = E ;
规约	当前待输入: end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S3 -> S
规约	当前待输入: end end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S2 -> begin S3 end
规约	当前待输入: end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S2 -> if B then M S1 N else M S2
规约	当前待输入: end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S -> S2
规约	当前待输入: end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S3 -> S
规约	当前待输入: end if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S0 -> begin S3 end
规约	当前待输入: if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S1 -> while M B do M S0
规约	当前待输入: if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S -> S1
规约	当前待输入: if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

M -> ε
规约	当前待输入: if c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: c < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: < 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

R -> <
规约	当前待输入: 5 then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> num
规约	当前待输入: then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

B2 -> E R E
规约	当前待输入: then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

B1 -> B2
规约	当前待输入: then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

B -> B1
规约	当前待输入: then begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

M -> ε
规约	当前待输入: begin z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: z = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: = x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: x + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: + 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: 1 ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> num
规约	当前待输入: ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E + E1
规约	当前待输入: ; end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S -> id = E ;
规约	当前待输入: end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S3 -> S
规约	当前待输入: end else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S1 -> begin S3 end
规约	当前待输入: else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

N -> ε
规约	当前待输入: else begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

M -> ε
规约	当前待输入: begin x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: x = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: = y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: y ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: ; end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S -> id = E ;
规约	当前待输入: end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S3 -> S
规约	当前待输入: end call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S2 -> begin S3 end
规约	当前待输入: call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S2 -> if B then M S1 N else M S2
规约	当前待输入: call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S -> S2
规约	当前待输入: call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

M -> ε
规约	当前待输入: call a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: a ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ( 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: 1 , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> num
规约	当前待输入: , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

EL -> E
规约	当前待输入: , 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: 2 + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> num
规约	当前待输入: + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: + 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: 1 , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> num
规约	当前待输入: , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E + E1
规约	当前待输入: , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

EL -> EL , E
规约	当前待输入: , a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: a * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: * b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: b ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E1 * E2
规约	当前待输入: ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

EL -> EL , E
规约	当前待输入: ) ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: //error e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

当前待输入: e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S -> call id ( EL ) ;
规约	当前待输入: e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

M -> ε
规约	当前待输入: e1 = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: = 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: 7 ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E2 -> num
规约	当前待输入: ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: ; // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: // error a = e2 ; // error a [ 0 ] = 1 ; // error end # 

当前待输入: a = e2 ; // error a [ 0 ] = 1 ; // error end # 

S -> id = E ;
规约	当前待输入: a = e2 ; // error a [ 0 ] = 1 ; // error end # 

M -> ε
规约	当前待输入: a = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: = e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: e2 ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: ; // error a [ 0 ] = 1 ; // error end # 

E2 -> id
规约	当前待输入: ; // error a [ 0 ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: ; // error a [ 0 ] = 1 ; // error end # 

E -> E1
规约	当前待输入: ; // error a [ 0 ] = 1 ; // error end # 

移入	当前待输入: // error a [ 0 ] = 1 ; // error end # 

当前待输入: a [ 0 ] = 1 ; // error end # 

S -> id = E ;
规约	当前待输入: a [ 0 ] = 1 ; // error end # 

M -> ε
规约	当前待输入: a [ 0 ] = 1 ; // error end # 

移入	当前待输入: [ 0 ] = 1 ; // error end # 

移入	当前待输入: 0 ] = 1 ; // error end # 

移入	当前待输入: ] = 1 ; // error end # 

E2 -> num
规约	当前待输入: ] = 1 ; // error end # 

E1 -> E2
规约	当前待输入: ] = 1 ; // error end # 

E -> E1
规约	当前待输入: ] = 1 ; // error end # 

移入	当前待输入: = 1 ; // error end # 

L -> id [ E ]
规约	当前待输入: = 1 ; // error end # 

移入	当前待输入: 1 ; // error end # 

移入	当前待输入: ; // error end # 

E2 -> num
规约	当前待输入: ; // error end # 

E1 -> E2
规约	当前待输入: ; // error end # 

E -> E1
规约	当前待输入: ; // error end # 

移入	当前待输入: // error end # 

当前待输入: end # 

S -> L = E ;
规约	当前待输入: end # 

S -> S M S
规约	当前待输入: end # 

S -> S M S
规约	当前待输入: end # 

S -> S M S
规约	当前待输入: end # 

S -> S M S
规约	当前待输入: end # 

S -> S M S
规约	当前待输入: end # 

S -> S M S
规约	当前待输入: end # 

移入	当前待输入: # 

P -> proc id ; M0 begin D S end
规约	当前待输入: # 

语法分析完成	
{3,M0,--} -> 
{6,X,--} -> {5,integer,integer}
{7,C,--} -> 
{8,T,--} -> {6,X,--}{7,C,--}
{11,D,--} -> {8,T,--}{9,id,a}{10,;,;}
{13,X,--} -> {12,integer,integer}
{14,C,--} -> 
{15,T,--} -> {13,X,--}{14,C,--}
{18,D,--} -> {15,T,--}{16,id,b}{17,;,;}
{20,X,--} -> {19,integer,integer}
{21,C,--} -> 
{22,T,--} -> {20,X,--}{21,C,--}
{25,D,--} -> {22,T,--}{23,id,c}{24,;,;}
{27,X,--} -> {26,integer,integer}
{28,C,--} -> 
{29,T,--} -> {27,X,--}{28,C,--}
{32,D,--} -> {29,T,--}{30,id,d}{31,;,;}
{34,X,--} -> {33,integer,integer}
{35,C,--} -> 
{36,T,--} -> {34,X,--}{35,C,--}
{39,D,--} -> {36,T,--}{37,id,x}{38,;,;}
{41,X,--} -> {40,integer,integer}
{42,C,--} -> 
{43,T,--} -> {41,X,--}{42,C,--}
{46,D,--} -> {43,T,--}{44,id,y}{45,;,;}
{48,X,--} -> {47,integer,integer}
{49,C,--} -> 
{50,T,--} -> {48,X,--}{49,C,--}
{53,D,--} -> {50,T,--}{51,id,z}{52,;,;}
{55,X,--} -> {54,integer,integer}
{56,C,--} -> 
{57,T,--} -> {55,X,--}{56,C,--}
{60,D,--} -> {57,T,--}{58,id,z}{59,;,;}
{61,D,--} -> {53,D,--}{60,D,--}
{62,D,--} -> {46,D,--}{61,D,--}
{63,D,--} -> {39,D,--}{62,D,--}
{64,D,--} -> {32,D,--}{63,D,--}
{65,D,--} -> {25,D,--}{64,D,--}
{66,D,--} -> {18,D,--}{65,D,--}
{67,D,--} -> {11,D,--}{66,D,--}
{71,E2,--} -> {70,num,3}
{72,E1,--} -> {71,E2,--}
{73,E,--} -> {72,E1,--}
{75,L,--} -> {68,id,arr}{69,[,[}{73,E,--}{74,],]}
{78,E2,--} -> {77,num,5}
{79,E1,--} -> {78,E2,--}
{80,E,--} -> {79,E1,--}
{82,L,--} -> {75,L,--}{76,[,[}{80,E,--}{81,],]}
{85,E2,--} -> {84,num,2}
{86,E1,--} -> {85,E2,--}
{87,E,--} -> {86,E1,--}
{89,S,--} -> {82,L,--}{83,=,=}{87,E,--}{88,;,;}
{90,M,--} -> 
{92,M,--} -> 
{94,E2,--} -> {93,id,a}
{95,E1,--} -> {94,E2,--}
{96,E,--} -> {95,E1,--}
{98,R,--} -> {97,<,<}
{100,E2,--} -> {99,id,b}
{101,E1,--} -> {100,E2,--}
{102,E,--} -> {101,E1,--}
{103,B2,--} -> {96,E,--}{98,R,--}{102,E,--}
{104,B1,--} -> {103,B2,--}
{105,B,--} -> {104,B1,--}
{107,M,--} -> 
{111,E2,--} -> {110,id,c}
{112,E1,--} -> {111,E2,--}
{113,E,--} -> {112,E1,--}
{115,R,--} -> {114,<,<}
{117,E2,--} -> {116,id,d}
{118,E1,--} -> {117,E2,--}
{119,E,--} -> {118,E1,--}
{120,B2,--} -> {113,E,--}{115,R,--}{119,E,--}
{121,B1,--} -> {120,B2,--}
{122,B,--} -> {121,B1,--}
{124,M,--} -> 
{129,E2,--} -> {128,id,y}
{130,E1,--} -> {129,E2,--}
{131,E,--} -> {130,E1,--}
{134,E2,--} -> {133,id,z}
{135,E1,--} -> {134,E2,--}
{136,E,--} -> {131,E,--}{132,+,+}{135,E1,--}
{138,S,--} -> {126,id,x}{127,=,=}{136,E,--}{137,;,;}
{139,S3,--} -> {138,S,--}
{141,S1,--} -> {125,begin,begin}{139,S3,--}{140,end,end}
{142,N,--} -> 
{144,M,--} -> 
{149,E2,--} -> {148,id,y}
{150,E1,--} -> {149,E2,--}
{153,E2,--} -> {152,id,z}
{154,E1,--} -> {150,E1,--}{151,*,*}{153,E2,--}
{155,E,--} -> {154,E1,--}
{157,S,--} -> {146,id,x}{147,=,=}{155,E,--}{156,;,;}
{158,S3,--} -> {157,S,--}
{160,S2,--} -> {145,begin,begin}{158,S3,--}{159,end,end}
{161,S2,--} -> {109,if,if}{122,B,--}{123,then,then}{124,M,--}{141,S1,--}{142,N,--}{143,else,else}{144,M,--}{160,S2,--}
{162,S,--} -> {161,S2,--}
{163,S3,--} -> {162,S,--}
{165,S0,--} -> {108,begin,begin}{163,S3,--}{164,end,end}
{166,S1,--} -> {91,while,while}{92,M,--}{105,B,--}{106,do,do}{107,M,--}{165,S0,--}
{167,S,--} -> {166,S1,--}
{168,M,--} -> 
{171,E2,--} -> {170,id,c}
{172,E1,--} -> {171,E2,--}
{173,E,--} -> {172,E1,--}
{175,R,--} -> {174,<,<}
{177,E2,--} -> {176,num,5}
{178,E1,--} -> {177,E2,--}
{179,E,--} -> {178,E1,--}
{180,B2,--} -> {173,E,--}{175,R,--}{179,E,--}
{181,B1,--} -> {180,B2,--}
{182,B,--} -> {181,B1,--}
{184,M,--} -> 
{189,E2,--} -> {188,id,x}
{190,E1,--} -> {189,E2,--}
{191,E,--} -> {190,E1,--}
{194,E2,--} -> {193,num,1}
{195,E1,--} -> {194,E2,--}
{196,E,--} -> {191,E,--}{192,+,+}{195,E1,--}
{198,S,--} -> {186,id,z}{187,=,=}{196,E,--}{197,;,;}
{199,S3,--} -> {198,S,--}
{201,S1,--} -> {185,begin,begin}{199,S3,--}{200,end,end}
{202,N,--} -> 
{204,M,--} -> 
{209,E2,--} -> {208,id,y}
{210,E1,--} -> {209,E2,--}
{211,E,--} -> {210,E1,--}
{213,S,--} -> {206,id,x}{207,=,=}{211,E,--}{212,;,;}
{214,S3,--} -> {213,S,--}
{216,S2,--} -> {205,begin,begin}{214,S3,--}{215,end,end}
{217,S2,--} -> {169,if,if}{182,B,--}{183,then,then}{184,M,--}{201,S1,--}{202,N,--}{203,else,else}{204,M,--}{216,S2,--}
{218,S,--} -> {217,S2,--}
{219,M,--} -> 
{224,E2,--} -> {223,num,1}
{225,E1,--} -> {224,E2,--}
{226,E,--} -> {225,E1,--}
{227,EL,--} -> {226,E,--}
{230,E2,--} -> {229,num,2}
{231,E1,--} -> {230,E2,--}
{232,E,--} -> {231,E1,--}
{235,E2,--} -> {234,num,1}
{236,E1,--} -> {235,E2,--}
{237,E,--} -> {232,E,--}{233,+,+}{236,E1,--}
{238,EL,--} -> {227,EL,--}{228,,,,}{237,E,--}
{241,E2,--} -> {240,id,a}
{242,E1,--} -> {241,E2,--}
{245,E2,--} -> {244,id,b}
{246,E1,--} -> {242,E1,--}{243,*,*}{245,E2,--}
{247,E,--} -> {246,E1,--}
{248,EL,--} -> {238,EL,--}{239,,,,}{247,E,--}
{251,S,--} -> {220,call,call}{221,id,a}{222,(,(}{248,EL,--}{249,),)}{250,;,;}
{252,M,--} -> 
{256,E2,--} -> {255,num,7}
{257,E1,--} -> {256,E2,--}
{258,E,--} -> {257,E1,--}
{260,S,--} -> {253,id,e1}{254,=,=}{258,E,--}{259,;,;}
{261,M,--} -> 
{265,E2,--} -> {264,id,e2}
{266,E1,--} -> {265,E2,--}
{267,E,--} -> {266,E1,--}
{269,S,--} -> {262,id,a}{263,=,=}{267,E,--}{268,;,;}
{270,M,--} -> 
{274,E2,--} -> {273,num,0}
{275,E1,--} -> {274,E2,--}
{276,E,--} -> {275,E1,--}
{278,L,--} -> {271,id,a}{272,[,[}{276,E,--}{277,],]}
{281,E2,--} -> {280,num,1}
{282,E1,--} -> {281,E2,--}
{283,E,--} -> {282,E1,--}
{285,S,--} -> {278,L,--}{279,=,=}{283,E,--}{284,;,;}
{286,S,--} -> {269,S,--}{270,M,--}{285,S,--}
{287,S,--} -> {260,S,--}{261,M,--}{286,S,--}
{288,S,--} -> {251,S,--}{252,M,--}{287,S,--}
{289,S,--} -> {218,S,--}{219,M,--}{288,S,--}
{290,S,--} -> {167,S,--}{168,M,--}{289,S,--}
{291,S,--} -> {89,S,--}{90,M,--}{290,S,--}
{293,P,--} -> {0,proc,proc}{1,id,abs}{2,;,;}{3,M0,--}{4,begin,begin}{67,D,--}{291,S,--}{292,end,end}
